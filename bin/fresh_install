#!/bin/bash
# new_install.sh
#
# description: install nixos on a new system
# @niceguy
#
# usage:
#   remotely: sh <(curl imp.nz)
#   locally: sh .. bin/new_install.sh
#
# NOTES:
#   this is not very dynamic - yet, if i feel the need i'll update it to be so
#   importantly you will need to manually and preemptively handle the file names
#   and device names currently
#
#   ... (hey thats declaritive at least!)
#
#
set -e

PHASE=""

[[ $1 == "" ]] && PHASE="live"

case $PHASE in
        base) echo "Installing copycat:base" ;;
        perennial) echo "Installing copycat:perennial" ;;
        live) echo "Installing copycat:live" ;;
        *) echo "cant figure out wtf you want to do" && exit 1 ;;
esac

[[ ! `whoami` == "root"  ]] && echo "Must be run as root.." && exit 1

echo "THIS WILL NUKE WHATEVER DEVICE YOU POINT IT AT WITHOUT CHECKS AND SAFETY, YOU HAVE BEEN WARNED"

echo "Enter your device name [nvme0n1]: "
read DISK_DEV
[[ $DISK_DEV == "" ]] && DISK_DEV="nvme0n1";
echo "[/dev/$DISK_DEV] ... is this correct?"
read -n1 -r -p " to confirm [y|enter] : " CHOICE
case $CHOICE in
  y|Y|"") echo "" ;;
  *) exit 1 ;;
esac

pushd /tmp
nix-shell -p git --run "git clone https://github.com/nice-0/copycat.git"
nix --experimental-features "nix-command flakes" run github:nix-community/disko -- --mode disko /tmp/copycat/base/disko.nix --arg device '"/dev/'${DISK_DEV}'"'
popd +1

nixos-generate-config --no-filesystems --root /mnt # do we just need files to exist in /mnt/etc/nixos?

pushd /mnt/copycat
nix-shell -p git --run "git clone https://github.com/nice-0/copycat.git ."
nixos-generate-config --no-filesystems --root /mnt --dir /mnt/copycat/base
popd +1 

pushd /mnt/copycat/base

echo "#WARNING: DO NOT TOUCH ./_origin-version.nix UNLESS ABSOLUTELY CERTAIN YOU KNOW WHAT YOU'RE DOING" > _origin-version.nix
echo "{" >> _origin-version.nix
cat configuration.nix | grep "system.stateVersion" >> _origin-version.nix
echo "}" >> _origin-version.nix

pushd /mnt/etc/nixos
cp /mnt/copycat/base/*.nix .
cp /mnt/copycat/live/*.nix .

sed -i 's/\.\/base//g' *.nix
nixos-install --flake /mnt/etc/nixos#default
popd +1


### 
# setup keys/secret/password shit
#

# from vimjoyer
# generate new key at ~/.config/sops/age/keys.txt
# nix shell nixpkgs#age age-keygen -o ~/.config/sops/age/keys.txt

# generate new key at ~/.config/sops/age/keys.txt from private ssh key at ~/.ssh/private 
# nix run nixpkgs#ssh-to-age -- -private-key -i ~/.ssh/private > ~/.config/sops/age/keys.txt

# So it seems we should start from an SSH key that way we have all the necessary tools for our
# systems key management - in theory i think of this more like a butler going back and forth 
# fetching the correct things but i can step in to adjust things if needed unlike most other
# authentication methods where a bunch of unknown shit happens... 
#
mkdir -p /copycat/keys/system
pushd /copycat/keys/system

ssh-keygen -f ./ssh.key -t rsa -b 4096 -N '' -C "copycat@copycat@copycat"

nix --experimental-features "nix-command flakes" run nixpkgs#ssh-to-age -- -private-key -i ./ssh.key > ./age.key
nix --experimental-features "nix-command flakes" shell nixpkgs#age -c age-keygen -y ./age.key > ./age.pub

echo "# age.pub" > /tmp/pubs
echo "" >> /tmp/pubs
echo "# ssh.pub" >> /tmp/pubs
cat ssh.pub >> /tmp/pubs

# this prints a public version to stdout (we pipe to termbin because boss)
cat /tmp/pubs | nc termbin.com 9999
popd +1

echo "your systems PUBLIC SSH and AGE keys should be in the link above"
read -p "Press any key to reboot <C-c>-c-c-caaancel" && reboot

